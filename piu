#!/bin/bash

# üöÄ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π –ü–ú–ñ –°–µ—Ä–±–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy.sh [vercel|netlify|docker]

set -e

PROJECT_NAME="pmz-serbia-app"
CURRENT_DIR=$(pwd)

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏
print_step() {
    echo -e "${BLUE}[STEP]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_step "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v node &> /dev/null; then
        print_error "Node.js –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js 18+ —Å https://nodejs.org"
        exit 1
    fi
    
    if ! command -v npm &> /dev/null; then
        print_error "npm –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    print_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞
create_project_structure() {
    print_step "–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞..."
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    mkdir -p "$PROJECT_NAME"/{src,public}
    cd "$PROJECT_NAME"
    
    # package.json
    cat > package.json << 'EOF'
{
  "name": "pmz-serbia-app",
  "version": "1.0.0",
  "description": "–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–∞ –ü–ú–ñ –≤ –°–µ—Ä–±–∏–∏",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "preview": "vite preview",
    "start": "vite preview --port $PORT --host"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "lucide-react": "^0.263.1"
  },
  "devDependencies": {
    "@types/react": "^18.2.15",
    "@types/react-dom": "^18.2.7",
    "@vitejs/plugin-react": "^4.0.3",
    "autoprefixer": "^10.4.14",
    "postcss": "^8.4.27",
    "tailwindcss": "^3.3.3",
    "vite": "^4.4.5"
  },
  "keywords": ["pmz", "serbia", "documents", "immigration", "visa"],
  "author": "PMZ Helper Team",
  "license": "MIT"
}
EOF

    # vite.config.js
    cat > vite.config.js << 'EOF'
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  base: './',
  build: {
    outDir: 'dist',
    assetsDir: 'assets'
  },
  server: {
    port: 3000,
    host: true
  }
})
EOF

    # tailwind.config.js
    cat > tailwind.config.js << 'EOF'
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
EOF

    # postcss.config.js
    cat > postcss.config.js << 'EOF'
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
EOF

    # index.html
    cat > index.html << 'EOF'
<!doctype html>
<html lang="ru">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="–ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ü–ú–ñ –≤ –°–µ—Ä–±–∏–∏" />
    <meta name="keywords" content="–ü–ú–ñ, –°–µ—Ä–±–∏—è, –¥–æ–∫—É–º–µ–Ω—Ç—ã, –∏–º–º–∏–≥—Ä–∞—Ü–∏—è" />
    <title>–ü–ú–ñ –°–µ—Ä–±–∏—è - –ü–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>
EOF

    # src/main.jsx
    cat > src/main.jsx << 'EOF'
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.jsx'
import './index.css'

ReactDOM.createRoot(document.getElementById('root')).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
EOF

    # src/index.css
    cat > src/index.css << 'EOF'
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  margin: 0;
  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  background-color: #f8fafc;
}

* {
  box-sizing: border-box;
}
EOF

    # .gitignore
    cat > .gitignore << 'EOF'
# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Production builds
dist/
build/

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# IDE
.vscode/
.idea/

# OS
.DS_Store
Thumbs.db

# Logs
logs
*.log
EOF

    print_success "–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞ —Å–æ–∑–¥–∞–Ω–∞"
}

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
install_dependencies() {
    print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    npm install
    print_success "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
build_project() {
    print_step "–°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
    npm run build
    print_success "–ü—Ä–æ–µ–∫—Ç —Å–æ–±—Ä–∞–Ω –≤ –ø–∞–ø–∫—É dist/"
}

# –î–µ–ø–ª–æ–π –Ω–∞ Vercel
deploy_vercel() {
    print_step "–î–µ–ø–ª–æ–π –Ω–∞ Vercel..."
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ª–∏ Vercel CLI
    if ! command -v vercel &> /dev/null; then
        print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Vercel CLI..."
        npm install -g vercel
    fi
    
    # vercel.json
    cat > vercel.json << 'EOF'
{
  "version": 2,
  "builds": [
    {
      "src": "package.json",
      "use": "@vercel/static-build",
      "config": {
        "distDir": "dist"
      }
    }
  ],
  "routes": [
    {
      "src": "/(.*)",
      "dest": "/index.html"
    }
  ]
}
EOF
    
    print_step "–ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è –Ω–∞ Vercel..."
    vercel --prod
    
    print_success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–¥–µ–ø–ª–æ–µ–Ω–æ –Ω–∞ Vercel!"
}

# –î–µ–ø–ª–æ–π –Ω–∞ Netlify
deploy_netlify() {
    print_step "–î–µ–ø–ª–æ–π –Ω–∞ Netlify..."
    
    # netlify.toml
    cat > netlify.toml << 'EOF'
[build]
  publish = "dist"
  command = "npm run build"

[[redirects]]
  from = "/*"
  to = "/index.html"
  status = 200

[build.environment]
  NODE_VERSION = "18"
EOF
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Netlify CLI
    if ! command -v netlify &> /dev/null; then
        print_step "–£—Å—Ç–∞–Ω–æ–≤–∫–∞ Netlify CLI..."
        npm install -g netlify-cli
    fi
    
    build_project
    
    print_step "–ó–∞–ø—É—Å–∫ –¥–µ–ø–ª–æ—è –Ω–∞ Netlify..."
    netlify deploy --prod --dir=dist
    
    print_success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–¥–µ–ø–ª–æ–µ–Ω–æ –Ω–∞ Netlify!"
}

# –î–µ–ø–ª–æ–π —Å Docker
deploy_docker() {
    print_step "–î–µ–ø–ª–æ–π —Å Docker..."
    
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker —Å https://docker.com"
        exit 1
    fi
    
    # Dockerfile
    cat > Dockerfile << 'EOF'
FROM node:18-alpine as build

WORKDIR /app

COPY package*.json ./
RUN npm ci --only=production

COPY . .
RUN npm run build

FROM nginx:alpine
COPY --from=build /app/dist /usr/share/nginx/html
COPY nginx.conf /etc/nginx/conf.d/default.conf

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
EOF

    # nginx.conf
    cat > nginx.conf << 'EOF'
server {
    listen 80;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html;

    location / {
        try_files $uri $uri/ /index.html;
    }

    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
}
EOF

    # docker-compose.yml
    cat > docker-compose.yml << 'EOF'
version: '3.8'
services:
  pmz-app:
    build: .
    ports:
      - "3000:80"
    environment:
      - NODE_ENV=production
    restart: unless-stopped
EOF
    
    print_step "–°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–∞..."
    docker build -t pmz-serbia-app .
    
    print_step "–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
    docker run -d -p 3000:80 --name pmz-serbia-app pmz-serbia-app
    
    print_success "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ http://localhost:3000"
}

# –õ–æ–∫–∞–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫
run_local() {
    print_step "–ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ dev-—Å–µ—Ä–≤–µ—Ä–∞..."
    npm run dev
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "üöÄ –î–µ–ø–ª–æ–π –ø–æ–º–æ—â–Ω–∏–∫–∞ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –ü–ú–ñ –°–µ—Ä–±–∏—è"
    echo "=============================================="
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    if [ $# -eq 0 ]; then
        echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [vercel|netlify|docker|local]"
        echo ""
        echo "–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:"
        echo "  vercel   - –î–µ–ø–ª–æ–π –Ω–∞ Vercel (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)"
        echo "  netlify  - –î–µ–ø–ª–æ–π –Ω–∞ Netlify"
        echo "  docker   - –ó–∞–ø—É—Å–∫ –≤ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ"
        echo "  local    - –õ–æ–∫–∞–ª—å–Ω—ã–π dev-—Å–µ—Ä–≤–µ—Ä"
        exit 1
    fi
    
    DEPLOY_TYPE=$1
    
    check_dependencies
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–µ–∫—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if [ ! -d "$PROJECT_NAME" ]; then
        create_project_structure
    else
        cd "$PROJECT_NAME"
    fi
    
    # –ö–æ–ø–∏—Ä—É–µ–º App.jsx (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ —Ç–æ–π –∂–µ –ø–∞–ø–∫–µ)
    if [ -f "../App.jsx" ]; then
        cp "../App.jsx" "src/App.jsx"
        print_success "App.jsx —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω"
    else
        print_warning "App.jsx –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ src/App.jsx"
    fi
    
    install_dependencies
    
    case $DEPLOY_TYPE in
        vercel)
            deploy_vercel
            ;;
        netlify)
            deploy_netlify
            ;;
        docker)
            deploy_docker
            ;;
        local)
            run_local
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–µ–ø–ª–æ—è: $DEPLOY_TYPE"
            exit 1
            ;;
    esac
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
trap 'echo -e "\n${YELLOW}–î–µ–ø–ª–æ–π –æ—Ç–º–µ–Ω–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º${NC}"; exit 1' INT

# –ó–∞–ø—É—Å–∫
main "$@"
